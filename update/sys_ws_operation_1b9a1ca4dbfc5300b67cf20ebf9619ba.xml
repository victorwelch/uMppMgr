<?xml version="1.0" encoding="UTF-8"?>
<record_update table="sys_ws_operation">
    <sys_ws_operation action="INSERT_OR_UPDATE">
        <active>true</active>
        <consumes>application/json,application/xml,text/xml</consumes>
        <consumes_customized>false</consumes_customized>
        <default_operation_uri/>
        <enforce_acl/>
        <http_method>PUT</http_method>
        <name>uLoadUpdate</name>
        <operation_script><![CDATA[function ulChildTasks(argChildTaskList,argSysId)
{
	if (argChildTaskList.length<1) return [];
    var myGr, mySysId, myDtmStart, myDtmEnd, isNeedUpdate, isUpdate,tmpObj;
    var myQuerySysId;
    var tp;
    var tp1List = ['taskassignmentgroup',
				   'taskassignedto',				   
				   'taskstate',
                   'taskpriority',
                   'taskimpact',
                   'tasktype',
                   'taskconstraint',
                   'taskkeymilestone',
                   'taskmilestone',
                   'taskplannedstartdate',
                   'taskplannedenddate',
                   'taskactualstartdate',
                   'taskactualenddate'];
    var tp1Len = tp1List.length;
	var fldList = {tasknum:'number',
				   taskname:'short_description',
				   taskassignmentgroup:'assignment_group',
				   taskassignedto:'assigned_to',
				   taskstate:'state',
                   taskpriority:'priority',
                   taskimpact:'impact',
                   tasktype:'u_task_type',
                   taskconstraint:'time_constraint',
                   taskkeymilestone:'key_milestone',
                   taskmilestone:'milestone',
                   taskplannedstartdate:'end_date',
                   taskplannedenddate:'start_date',
                   taskactualstartdate:'work_start',
                   taskactualenddate:'work_end'};	    
    myGr = new GlideRecord("pm_project_task");
    myGr.initialize();
                   
	for (var i=0,iLength=argChildTaskList.length;i<iLength;i++)
	{   
        if (argChildTaskList[i].childlist.length > 0) {
            ulChildTasks(argChildTaskList[i].childlist);
        }
		
		isNeedUpdate = false;
		for (var c=0;c<tp1Len;c++)
		{
			tmpObj = argChildTaskList[i];
			tp = tmpObj[tp1List[c]];
			//gs.info("*vw*: " + tp1List[c]+" : " + tp.datastatus );
			if (tp.datastatus == 'new' || tp.datastatus == 'update') 
			{
				//gs.info('*vw* 1.'+tp1List[c]+':'+tp.datastatus);				
				isNeedUpdate = true;
				break;
			}
		}
		if (isNeedUpdate)
		{
			myGr = new GlideRecord("pm_project_task");
			myGr.initialize();

			myQuerySysId = 'sys_id=' + argChildTaskList[i].tasknum.value;
			myGr.addEncodedQuery(myQuerySysId);
			myGr.query();
			if (myGr.next()) 
			{
				isUpdate = false;			
				for (var k=0; k < tp1Len; k++) 
				{
					tmpObj = argChildTaskList[i];
					tp = tmpObj[tp1List[k]];
					if (tp.datastatus == 'new' || tp.datastatus == 'update')                
					{
						isUpdate = true;
						fld = fldList[tp1List[k]];
						myGr.setValue(fld,tp.value);
						//gs.info('*vw* 2.'+tp1List[k]+':'+fld+':'+tp.value);	
					}
				}
				if (isUpdate) myGr.update();
			}  
		}      
    }
}
function uReCalcAll(argProjSysId)
{
	var plannedTaskAPI = new global.SncPlannedTaskAPI();
	plannedTaskAPI.recalculate(argProjSysId);
}
(function process(/*RESTAPIRequest*/ request, /*RESTAPIResponse*/ response) {
    // implement resource here	
    var myGr, mySysId, myDtmStart, myDtmEnd,  myQuerySysId, isNeedUpdate, isUpdate, tmpObj;
    var myRtnList=[];
    var pp,fld;
    var pp1List = ['projectname',
                   'projectmgr',
                   'portfolio',
                   'program',
                   'cmdbci',
                   'assignedto',
                   'phase',
                   'phasetype',
                   'schedule',
                   'state',
                   'priority',
                   'risk',
                   'strategicpriority',
                   'hotitem',
                   'needsfollowup',
                   'plannedstartdate',
                   'plannedenddate',
                   'actualstartdate',
                   'actualenddate']; 
    var pp1Len = pp1List.length;
    var fldList = {projectnum:'number',
                   projectname:'short_description',
                   portfolio:'primary_portfolio',
                   program:'primary_program',
                   cmdbci:'cmdb_ci',
                   projectmgr:'project_manager',
                   assignedto:'assigned_to',
                   phase:'phase',
                   phasetype:'phase_type',
                   schedule:'schedule',
                   state:'state',
                   priority:'priority',
                   risk:'risk',
                   strategicpriority:'u_strategic_priority',
                   hotitem:'u_hot_item',
                   needsfollowup:'u_needs_follow_up',
                   plannedstartdate:'start_date',
                   plannedenddate:'end_date',
                   actualstartdate:'work_start',
                   actualenddate:'work_end'};        

    // *************************************
    var myId = request.pathParams.id;    // *    
    var myProj = request.body.data;      // *
    // *************************************

    for (var i = 0, iLength = myProj.length; i < iLength; i++)
	{
        ulChildTasks(myProj[i].childlist);

		isNeedUpdate = false;
		for (var c=0;c<pp1Len;c++)
		{
			tmpObj = myProj[i];
			pp = tmpObj[pp1List[c]];
			if (pp.datastatus == 'new' || pp.datastatus == 'update') 
			{
				//gs.info('*vw 3.* '+pp1List[c]+':'+pp.datastatus);
				isNeedUpdate = true;
				break;
			}
		}		
        mySysId = myProj[i].projectnum.value;
		if (isNeedUpdate)
		{
			myGr = new GlideRecord('pm_project');
			myGr.initialize();
			myQuerySysId = 'sys_id=' + mySysId;
			myGr.addEncodedQuery(myQuerySysId);
			myGr.query();
			if (myGr.next()) 
			{
				isUpdate = false;
				for (var k=0; k < pp1Len; k++) 
				{				
					tmpObj = myProj[i];
					pp = tmpObj[pp1List[k]];
					if (pp.datastatus == 'new' || pp.datastatus == 'update')                
					{
						isUpdate = true;
						fld = fldList[pp1List[k]];
						myGr.setValue(fld,pp.value);
						//gs.info('*vw 4.* '+pp1List[k]+':'+fld+':'+pp.value);
					}
				}
				if (isUpdate) myGr.update();
			}			
		}		
        myRtnList.push(mySysId);
	}
	for (var n=0,nLength=myRtnList.length;n<nLength;n++)
	{
		uReCalcAll(myRtnList[n]);
	}
	var data = {};
	return myRtnList;
})(request,response);]]></operation_script>
        <operation_uri>/api/x_126085_umppmgr/uweb/update/{id}</operation_uri>
        <produces>application/json,application/xml,text/xml</produces>
        <produces_customized>false</produces_customized>
        <relative_path>/update/{id}</relative_path>
        <request_example/>
        <requires_acl_authorization>false</requires_acl_authorization>
        <requires_authentication>true</requires_authentication>
        <short_description/>
        <sys_class_name>sys_ws_operation</sys_class_name>
        <sys_created_by>admin</sys_created_by>
        <sys_created_on>2018-03-08 20:25:47</sys_created_on>
        <sys_id>1b9a1ca4dbfc5300b67cf20ebf9619ba</sys_id>
        <sys_mod_count>6</sys_mod_count>
        <sys_name>uLoadUpdate</sys_name>
        <sys_package display_value="uMppMgr" source="x_126085_umppmgr">d93cab88db745300b67cf20ebf9619d2</sys_package>
        <sys_policy/>
        <sys_scope display_value="uMppMgr">d93cab88db745300b67cf20ebf9619d2</sys_scope>
        <sys_update_name>sys_ws_operation_1b9a1ca4dbfc5300b67cf20ebf9619ba</sys_update_name>
        <sys_updated_by>admin</sys_updated_by>
        <sys_updated_on>2018-04-10 23:06:32</sys_updated_on>
        <web_service_definition display_value="uWeb">a08ca78cdbb45300b67cf20ebf96195c</web_service_definition>
        <web_service_version/>
    </sys_ws_operation>
</record_update>
